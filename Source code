import pandas as pd

# Load the dataset
df = pd.read_csv("/mnt/data/cdb4f846a90c40be11fe61e5d817592c.csv")

# Display the first few rows
df.head()
import pandas as pd

df = pd.read_csv("/mnt/data/cdb4f846a90c40be11fe61e5d817592c.csv")
df.head()
df.info()
df.describe()
df.columns
df.isnull().sum()
df.duplicated().sum()
import seaborn as sns
import matplotlib.pyplot as plt

sns.pairplot(df)  # or plot specific features
plt.show()
X = df.drop('final_grade', axis=1)  # Replace 'final_grade' with your target column
y = df['final_grade']
cat_cols = X.select_dtypes(include='object').columns
X[cat_cols] = X[cat_cols].apply(lambda col: col.astype('category').cat.codes)
X = pd.get_dummies(X, drop_first=True)
from sklearn.preprocessing import StandardScaler

scaler = StandardScaler()
X_scaled = scaler.fit_transform(X)
from sklearn.model_selection import train_test_split

X_train, X_test, y_train, y_test = train_test_split(X_scaled, y, test_size=0.2, random_state=42)
from sklearn.ensemble import RandomForestRegressor

model = RandomForestRegressor()
model.fit(X_train, y_train)
from sklearn.metrics import mean_squared_error, r2_score

y_pred = model.predict(X_test)
print("MSE:", mean_squared_error(y_test, y_pred))
print("R2 Score:", r2_score(y_test, y_pred))
new_input = [[...]]

# Scale new input
new_input_scaled = scaler.transform(new_input)

# Predict
prediction = model.predict(new_input_scaled)
def prepare_input(data_dict):
    input_df = pd.DataFrame([data_dict])
    input_df[cat_cols] = input_df[cat_cols].apply(lambda col: col.astype('category').cat.codes)
    input_df = pd.get_dummies(input_df, drop_first=True)
    input_df = input_df.reindex(columns=X.columns, fill_value=0)
    input_scaled = scaler.transform(input_df)
    return input_scaled
def predict_grade(data_dict):
    processed_input = prepare_input(data_dict)
    return model.predict(processed_input)[0]
import gradio as gr
def gradio_interface(**kwargs):
 inputs = [gr.Textbox(label=col) for col in X.columns]  # adjust based on actual input type
gr.Interface(fn=gradio_interface, inputs=inputs, outputs="number", title="Final Grade Predictor").launch()
   return predict_grade(kwargs)
